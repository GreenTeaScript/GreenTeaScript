// ***************************************************************************
// Copyright (c) 2013-2014, Konoha project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// *  Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// **************************************************************************

// LibZen is a language-dependent code used in GreenTea.java

@Public abstract class LibZen {

	@Export @Public @Static String GetPlatform() {
		return "GreenTeaScript-" + MajorVersion + "." + MinerVersion + "." + PatchLevel;
	}

	@Export @Public @Static void println(String msg) {
		println(msg);
	}

	@Public @Static boolean DebugMode = false;

	@Public @Static int VerboseMask = VerboseUndefined;

	@Export @Private @Static String GetStackInfo(int depth) {
		return 0;
	}

	@Export @Public @Static void TODO(String msg) {
		println("TODO" + LibZen.GetStackInfo(2) + ": " + msg);
	}

	@Export @Public @Static void DebugP(String msg) {
		if(LibZen.DebugMode) {
			println("DEBUG" + LibZen.GetStackInfo(2) + ": " + msg);
		}
	}

	@Export @Public @Static void VerboseLog(int VerboseFlag, String Message) {
		if((LibZen.VerboseMask & VerboseFlag) == VerboseFlag) {
			println("GreenTea: " + Message);
		}
	}

	@Export @Public @Static void VerboseException(Exception e) {
		LibZen.VerboseLog(VerboseException, e.toString());
	}

	@Export @Public @Static void Exit(int status, String Message) {
		println(Message);
		exit(1);
	}

	@Export @Public @Static void Assert(boolean TestResult) {
		assert(TestResult);
	}

	@Export @Public @Static int CharAt(String Text, int Pos) {
		if(Pos < length(Text)) {
			return charAt(Text, Pos);
		}
		return 0;
	}

	@Export @Public @Static boolean IsWhitespace(String Text, int Pos) {
		int ch = LibZen.CharAt(Text, Pos);
		return Character.isWhitespace(ch);
	}

	@Export @Public @Static boolean IsLetter(String Text, int Pos) {
		int ch = LibZen.CharAt(Text, Pos);
		return Character.isLetter(ch);
	}

	@Export @Public @Static boolean IsDigit(String Text, int Pos) {
		int ch = LibZen.CharAt(Text, Pos);
		return Character.isDigit(ch);
	}

	@Export @Public @Static boolean IsVariableName(String Text, int Pos) {
		int ch = LibZen.CharAt(Text, Pos);
		return Character.isLetter(ch) || ch == 95/*_*/ || ch > 255;
	}

	@Export @Public @Static String CharToString(int code) {
		return code.toString();
	}

	@Export @Public @Static  String UnquoteString(String Text) {
		return Text
			.replace("\\t",  "\t")
			.replace("\\n",  "\n")
			.replace("\\r",  "\r")
			.replace("\\\"",  "\"")
			.replace("\\'",  "'")
			.replace("\\\\", "\\");
	}

	@Export @Public @Static  String QuoteString(String Text) {
		return Text
			.replace("\t", "\\t")
			.replace("\n", "\\n")
			.replace("\r", "\\r")
			.replace("\"", "\\\"")
			.replace("'",  "\\'")
			.replace("\\", "\\\\");
	}

	@Export @Public @Static boolean EqualsString(String s, String s2) {
		return s == s2;
	}

	@Export @Public @Static int ParseInt(String Text) {
		return (to int) Text;
	}

	@Export @Public @Static boolean IsUnixCommand(String cmd) {
		return false;
	}

	@Export @Public @Static GtType GetNativeType(GtContext Context, Object Value) {
		GtType NativeType = null;
		return NativeType;
	}

	@Export @Public @Static String GetClassName(Object Value) {
		return Value.getClass().getName();
	}

	@Export @Public @Static boolean MatchNativeMethod(GtType FuncType, Method JavaMethod) {
		GtContext Context = FuncType.Context;
		GtType ReturnType = FuncType.TypeParams[0];
		if(ReturnType != Context.VarType || ReturnType != Context.VoidType) {
			if(ReturnType != LibNative.GetNativeType(Context, JavaMethod.getReturnType())) {
				return false;
			}
		}
		int StartIndex = 2;
		if(Modifier.is@Static(JavaMethod.getModifiers())) {
			StartIndex = 1;
		}
		else {
			GtType RecvType = LibNative.GetNativeType(Context, JavaMethod.getDeclaringClass());
			if(FuncType.TypeParams.length == 1 || RecvType != FuncType.TypeParams[1]) {
				return false;
			}
			StartIndex = 2;
		}
		int ParamSize = FuncType.TypeParams.length - 2;
		Class<?>[] ParamTypes = JavaMethod.getParameterTypes();
		if(ParamTypes != null) {
			if(ParamTypes.length != ParamSize) return false;
			for(int j = 0; j < ParamTypes.length; j++) {
				if(ParamTypes[j] == Object) continue; // OK
				GtType JType = LibNative.GetNativeType(Context, ParamTypes[j]);
				if(JType != FuncType.TypeParams[StartIndex+j]) {
					return false;
				}
			}
			return true;
		}
		else {
			return ParamSize == 0;
		}
	}

	@Export @Public @Static GtFunc SetNativeMethod(GtFunc NativeFunc, Method JavaMethod) {
		int FuncFlag = NativeFunc;
		if(Modifier.is@Static(JavaMethod.getModifiers())) {
			FuncFlag |= Native@StaticFunc;
		}
		NativeFunc.SetNativeMethod(FuncFlag, JavaMethod);
		return NativeFunc;
	}

	@Export @Public @Static GtFunc ConvertNativeMethodToFunc(GtContext Context, Method JavaMethod) {
		Array<GtType> TypeList = new Array<GtType>();
		TypeList.add(LibNative.GetNativeType(Context, JavaMethod.getReturnType()));
		if(!Modifier.is@Static(JavaMethod.getModifiers())) {
			TypeList.add(LibNative.GetNativeType(Context, JavaMethod.getDeclaringClass()));
		}
		Class<?>[] ParamTypes = JavaMethod.getParameterTypes();
		if(ParamTypes != null) {
			for(int j = 0; j < ParamTypes.length; j++) {
				TypeList.add(LibNative.GetNativeType(Context, ParamTypes[j]));
			}
		}
		return SetNativeMethod(new GtFunc(0, JavaMethod.getName(), 0, TypeList), JavaMethod);
	}

	@Export @Public @Static Method LoadNativeMethod(GtType ContextType, String FullName, boolean @StaticMethodOnly) {
		Method FoundMethod = null;
		int Index = FullName.lastIndexOf(".");
		if(Index != -1) {
			String FuncName = FullName.substring(Index+1);
			try {
				Class<?> NativeClass = Class.forName(FullName.substring(0, Index));
				Method[] Methods = NativeClass.getDeclaredMethods();
				if(Methods != null) {
					for(int i = 0; i < Methods.length; i++) {
						if(LibZen.EqualsString(FuncName, Methods[i].getName())) {
							if(!Modifier.is@Public(Methods[i].getModifiers())) {
								continue;
							}
							if(@StaticMethodOnly && !Modifier.is@Static(Methods[i].getModifiers())) {
								continue;
							}
							if(ContextType.IsFuncType() && !LibZen.MatchNativeMethod(ContextType, Methods[i])) {
								continue;
							}
							if(FoundMethod != null) {
								LibZen.VerboseLog(VerboseUndefined, "overloaded method: " + FullName);
								return FoundMethod; // return the first one
							}
							FoundMethod = Methods[i];
						}
					}
				}
			} catch (ClassNotFoundException e) {
				LibZen.VerboseLog(VerboseException, e.toString());			
			}
		}
		if(FoundMethod == null) {
			LibZen.VerboseLog(VerboseUndefined, "undefined method: " + FullName + " of " + ContextType);
		}
		return FoundMethod;
	}

	@Export @Public @Static boolean ImportNativeMethod(GtFunc NativeFunc, String FullName) {
		Method JavaMethod = LibZen.LoadNativeMethod(NativeFunc.GetFuncType(), FullName, false);
		if(JavaMethod != null) {
			LibZen.SetNativeMethod(NativeFunc, JavaMethod);
			if(NativeFunc.GetReturnType().IsVarType()) {
				NativeFunc.SetReturnType(LibNative.GetNativeType(NativeFunc.GetContext(), JavaMethod.getReturnType()));
			}
		}
		return false;
	}

	@Export @Public @Static Method LookupNativeMethod(Object Callee, String FuncName) {
		if(FuncName != null) {
			// LibZen.DebugP("looking up method : " + Callee.getClass().getSimpleName() + "." + FuncName);
			Method[] methods = Callee.getClass().getMethods();
			for(int i = 0; i < methods.length; i++) {
				if(FuncName.equals(methods[i].getName())) {
					return methods[i];
				}
			}
			LibZen.VerboseLog(VerboseUndefined, "undefined method: " + Callee.getClass().getSimpleName() + "." + FuncName);
		}
		return null;
	}

	@Export @Public @Static boolean EqualsFunc(Method m1, Method m2) {
		if(m1 == null) {
			return (m2 == null) ? true : false;
		}
		else {
			return (m2 == null) ? false : m1.equals(m2);
		}
	}

	@Export @Public @Static TokenFunc CreateOrReuseTokenFunc(any f, TokenFunc prev) {
		if(prev != null && EqualsFunc(prev.Func.Func, f.Func)) {
			return prev;
		}
		return new TokenFunc(f, prev);
	}

	@Export @Public @Static int ApplyTokenFunc(any Delegate, Object TokenContext, String Text, int pos) {
		try {
			int n = (int)Delegate.Func.invoke(Delegate.Self, TokenContext, Text, pos);
			return n;
		}
		catch (InvocationTargetException e) {
			LibZen.VerboseException(e);
		}
		catch (IllegalArgumentException e) {
			LibZen.VerboseException(e);
		}
		catch (IllegalAccessException e) {
			LibZen.VerboseException(e);
		}
		Exit(1, "Failed ApplyTokenFunc");
		return -1;
	}

	@Export @Public @Static GtSyntaxTree ApplyMatchFunc(any Delegate, Object NameSpace, Object TokenContext, Object LeftNode, Object Pattern) {
		try {
			return (GtSyntaxTree)Delegate.Func.invoke(Delegate.Self, NameSpace, TokenContext, LeftNode, Pattern);
		}
		catch (InvocationTargetException e) {
			LibZen.VerboseException(e);
		}
		catch (IllegalArgumentException e) {
			LibZen.VerboseException(e);
		}
		catch (IllegalAccessException e) {
			LibZen.VerboseException(e);
		}
		Exit(1, "Failed ApplyMatchFunc");
		return null;
	}

	@Export @Public @Static GtNode ApplyTypeFunc(any Delegate, Object Gamma, Object ParsedTree, Object TypeInfo) {
		try {
			return (GtNode)Delegate.Func.invoke(Delegate.Self, Gamma, ParsedTree, TypeInfo);
		}
		catch (InvocationTargetException e) {
			LibZen.VerboseException(e);
		}
		catch (IllegalArgumentException e) {
			LibZen.VerboseException(e);
		}
		catch (IllegalAccessException e) {
			LibZen.VerboseException(e);
		}
		Exit(1, "Failed ApplyTypeFunc");
		return null;
	}

	@Export @Public @Static int ListSize(any List) {
		if(List == null) {
			return 0;
		}
		return List.size();
	}

	@Export @Public @Static GtType[] CompactTypeList(int BaseIndex, Array<GtType> List) {
		GtType[] Tuple = new GtType[List.size() - BaseIndex];
		for(int i = BaseIndex; i < List.size(); i++) {
			Tuple[i] = List.get(i);
		}
		return Tuple;
	}

	@Export @Public @Static String[] CompactStringList(Array<String> List) {
		if(List == null) {
			return null;
		}
		String[] Tuple = new String[List.size()];
		for(int i = 0; i < List.size(); i++) {
			Tuple[i] = List.get(i);
		}
		return Tuple;
	}

	@Export @Public @Static String[] MapGetKeys(GtMap Map) {
		Iterator<String> itr = Map.Map.keySet().iterator();
		Array<String> List = new Array<String>(Map.Map.size());
		int i = 0;
		while(itr.hasNext()) {
			List.add(itr.next());
			i = i + 1;
		}
		return List.toArray(new String[List.size()]);
	}

	@Export @Public @Static void Usage(String Message) {
		console.log("greentea usage :");
		console.log("  --lang|-l LANG        Set Target Language");
		console.log("      bash                Bash");
		console.log("      C C99               C99");
		console.log("      CSharp              CSharp");
		console.log("      java java7 java8    Java");
		console.log("      javascript js       JavaScript");
		console.log("      lua                 Lua");
		console.log("      haxe                Haxe");
		console.log("      ocaml               OCaml");
		console.log("      perl                Perl");
		console.log("      python              Python");
		console.log("      R                   R");
		console.log("      ruby                Ruby");
		console.log("      typescript ts       TypeScript");
		console.log("");
		console.log("  --out|-o  FILE        Output filename");
		console.log("  --eval|-e EXPR        Program passed in as string");
		console.log("  --verbose             Printing Debug infomation");
		console.log("     --verbose:symbol     adding symbol info");
		console.log("     --verbose:token      adding token info");
		console.log("     --verbose:no         no log");
		LibZen.Exit(0, Message);
	}

	@Export @Public @Static String DetectTargetCode(String Extension, String TargetCode) {
		if(Extension.endsWith(".js")) {
			return "js";
		}
		else if(Extension.endsWith(".pl")) {
			return "perl";
		}
		else if(Extension.endsWith(".py")) {
			return "python";
		}
		else if(Extension.endsWith(".sh")) {
			return "bash";
		}
		else if(Extension.endsWith(".java")) {
			return "java";
		}
		else if(Extension.endsWith(".c")) {
			return "c";
		}
		else if(TargetCode.startsWith("X")) {
			return "exe";
		}
		return TargetCode;
	}

	@Export @Public @Static GtGenerator CodeGenerator(String TargetCode, String OutputFile, int GeneratorFlag) {
		String Extension = (OutputFile == null) ? "-" : OutputFile;
		TargetCode = DetectTargetCode(Extension, TargetCode);
		TargetCode = TargetCode.toLowerCase();
		if(TargetCode.startsWith("js") || TargetCode.startsWith("javascript")) {
			return new JavaScriptSourceGenerator(TargetCode, OutputFile, GeneratorFlag);
		}
		else if(TargetCode.startsWith("pl") || TargetCode.startsWith("perl")) {
			return new PerlSourceGenerator(TargetCode, OutputFile, GeneratorFlag);
		}
		else if(TargetCode.startsWith("python")) {
			return new PythonSourceGenerator(TargetCode, OutputFile, GeneratorFlag);
		}
		else if(TargetCode.startsWith("bash")) {
			return new BashSourceGenerator(TargetCode, OutputFile, GeneratorFlag);
		}
		else if(TargetCode.startsWith("java")) {
			return new JavaSourceGenerator(TargetCode, OutputFile, GeneratorFlag);
		}
		else if(TargetCode.startsWith("c")) {
			return new CSourceGenerator(TargetCode, OutputFile, GeneratorFlag);
		}
		else if(TargetCode.startsWith("exe")) {
			return new JavaByteCodeGenerator(TargetCode, OutputFile, GeneratorFlag);
		}
		return null;
	}

	@Export @Public @Static void WriteCode(String OutputFile, String SourceCode) {
		if(OutputFile == null) {
			LibZen.Eval(SourceCode);
		}
		if(OutputFile.equals("-")) {
			console.log(SourceCode);
			System.out.flush();
		}
		else {
			Writer out = null;
			try {
				out = new FileWriter(OutputFile);
				out.write(SourceCode);
				out.flush();
				out.close();
			} catch (IOException e) {
				System.err.println("Cannot write: " + OutputFile);
				System.exit(1);
			}
		}
	}

	@Private @Static java.io.Console Console = null;

	@Export @Public @Static String ReadLine(String Prompt) {
		if(Console == null) {
			Console = System.console();
		}
		String Line = Console.readLine(Prompt);
		if(Line == null) {
			System.exit(0);
		}
		return Line;
	}

	@Export @Public @Static boolean HasFile(String Path) {
		if(LibZen.class.getResource(Path) != null) {
			return true;
		}
		return new File(Path).exists();
	}

	@Export @Public @Static boolean IsSupportedTarget(String TargetCode) {
		return HasFile(GetLibPath(TargetCode, "common"));
	}

	@Export @Public @Static String GetLibPath(String TargetCode, String LibName) {
		return "lib/" + TargetCode + "/" + LibName + ".green";
	}
	
	@Export @Private  @Static String FormatFilePath(String FileName) {
		String Path = FileName;
		if(HasFile(Path)) {
			return Path;
		}
		String Home = System.getProperty("GREENTEA_HOME");
		if(Home != null) {
			Path = Home + FileName;
		}
		if(HasFile(Path)) {
			return Path;
		}
		return FileName;
	}

	@Export @Public @Static String LoadFile2(String FileName) {
		LibZen.VerboseLog(VerboseFile, "loading " + FileName);
		InputStream Stream = LibZen.class.getResourceAsStream("/" + FileName);
		if(Stream == null) {
			File f = new File(FormatFilePath(FileName));
			try {
				Stream = new FileInputStream(f);
			} catch (FileNotFoundException e) {
				return null;
			}
		}
		BufferedReader reader = new BufferedReader(new InputStreamReader(Stream));
		String buffer = "";
		try {
			int buflen = 4096;
			int readed = 0;
			int[] buf = new int[buflen];
			StringBuilder builder = new StringBuilder();
			while((readed = reader.read(buf, 0, buflen)) >= 0) {
				builder.append(buf, 0, readed);
			}
			buffer = builder.toString();
		} catch (IOException e) {
			return null;
		}
		return buffer;
	}

	@Export @Public @Static int JoinIntId(int UpperId, int LowerId) {
		int id = UpperId;
		id = (id << 32) + LowerId;
		return id;
	}

	@Export @Public @Static int UpperId(int FileLine) {
		return (int)(FileLine >> 32);
	}

	@Export @Public @Static int LowerId(int FileLine) {
		return (int)FileLine;
	}

	@Export @Public @Static boolean booleanValue(Object BooleanValue) {
		return ((/*cast*/Boolean)BooleanValue).booleanValue();
	}

	@Export @Public @Static Object Eval(String SourceCode) {
		LibZen.VerboseLog(VerboseEval, "eval as native code: " + SourceCode);
		//eval(SourceCode);
		//System.out.println("Eval: " + SourceCode);  // In Java, no eval
		return null;
	}

	@Export @Public @Static Object EvalCast(GtType CastType, Object Value) {
		if(Value != null) {
			GtType ValueType = CastType.Context.GuessType(Value);
			if(ValueType == CastType || CastType.Accept(ValueType)) {
				return Value;
			}
			TODO("Add Invoke Coercion.. from " + ValueType + " to " + CastType);
			if(CastType == CastType.Context.StringType) {
				return Value.toString();
			}
		}
		return null;
	}

	@Export @Public @Static Object EvalInstanceOf(Object Value, GtType Type) {
		if(Value != null) {
			GtType ValueType = Type.Context.GuessType(Value);
			if(ValueType == Type || Type.Accept(ValueType)) {
				return true;
			}
		}
		return false;
	}

	@Export @Public @Static Object EvalUnary(GtType Type, String Operator, Object Value) {
		if(Value instanceof Boolean) {
			if(Operator.equals("!") || Operator.equals("not")) {
				return EvalCast(Type, !((Boolean)Value).booleanValue());
			}
			return null;
		}
		if(Value instanceof int || Value instanceof int  || Value instanceof Short) {
			if(Operator.equals("-")) {
				return EvalCast(Type, -((Number)Value));
			}
			if(Operator.equals("+")) {
				return EvalCast(Type, +((Number)Value));
			}
			if(Operator.equals("~")) {
				return EvalCast(Type, ~((Number)Value));
			}
			return null;
		}
		return null;
	}

	@Export @Public @Static Object EvalSuffix(GtType Type, Object Value, String Operator) {
		return null;
	}

	@Export @Public @Static Object EvalBinary(GtType Type, Object LeftValue, String Operator, Object RightValue) {
		if(LeftValue == null || RightValue == null) {
			return null;
		}
		if(LeftValue instanceof String || RightValue instanceof String) {
			String left = EvalCast(Type.Context.StringType, LeftValue).toString();
			String right = EvalCast(Type.Context.StringType, RightValue).toString();
			if(Operator.equals("+")) {
				return  EvalCast(Type, left + right);
			}
		}
		if(LeftValue instanceof String && RightValue instanceof String) {
			String left = EvalCast(Type.Context.StringType, LeftValue).toString();
			String right = EvalCast(Type.Context.StringType, RightValue).toString();
			if(Operator.equals("==")) {
				return  EvalCast(Type, left.equals(right));
			}
			if(Operator.equals("!=")) {
				return EvalCast(Type, !left.equals(right));
			}
			if(Operator.equals("<")) {
				return EvalCast(Type, left.compareTo(right) < 0);
			}
			if(Operator.equals("<=")) {
				return EvalCast(Type, left.compareTo(right) <= 0);
			}
			if(Operator.equals(">")) {
				return EvalCast(Type, left.compareTo(right) > 0);
			}
			if(Operator.equals(">=")) {
				return EvalCast(Type, left.compareTo(right) >= 0);
			}
			return null;
		}
		if(LeftValue instanceof float || LeftValue instanceof float || RightValue instanceof float || RightValue instanceof float) {
			try {
				float left = ((Number)LeftValue);
				float right = ((Number)RightValue);
				if(Operator.equals("+")) {
					return EvalCast(Type, left + right);
				}
				if(Operator.equals("-")) {
					return EvalCast(Type, left - right);
				}
				if(Operator.equals("*")) {
					return EvalCast(Type, left * right);
				}
				if(Operator.equals("/")) {
					return EvalCast(Type, left / right);
				}
				if(Operator.equals("%") || Operator.equals("mod")) {
					return EvalCast(Type, left % right);
				}
				if(Operator.equals("==")) {
					return EvalCast(Type, left == right);
				}
				if(Operator.equals("!=")) {
					return EvalCast(Type, left != right);
				}
				if(Operator.equals("<")) {
					return EvalCast(Type, left < right);
				}
				if(Operator.equals("<=")) {
					return EvalCast(Type, left <= right);
				}
				if(Operator.equals(">")) {
					return EvalCast(Type, left > right);
				}
				if(Operator.equals(">=")) {
					return EvalCast(Type, left >= right);
				}
			}
			catch(ClassCastException e) {
			}
			return null;
		}
		if(LeftValue instanceof Boolean && RightValue instanceof Boolean) {
			boolean left = (Boolean)LeftValue;
			boolean right = (Boolean)RightValue;
			if(Operator.equals("==")) {
				return EvalCast(Type, left == right);
			}
			if(Operator.equals("!=")) {
				return EvalCast(Type, left != right);
			}
			return null;
		}
		try {
			int left = ((Number)LeftValue);
			int right = ((Number)RightValue);
			if(Operator.equals("+")) {
				return EvalCast(Type, left + right);
			}
			if(Operator.equals("-")) {
				return EvalCast(Type, left - right);
			}
			if(Operator.equals("*")) {
				return EvalCast(Type, left * right);
			}
			if(Operator.equals("/")) {
				return EvalCast(Type, left / right);
			}
			if(Operator.equals("%") || Operator.equals("mod")) {
				return EvalCast(Type, left % right);
			}
			if(Operator.equals("==")) {
				return EvalCast(Type, left == right);
			}
			if(Operator.equals("!=")) {
				return EvalCast(Type, left != right);
			}
			if(Operator.equals("<")) {
				return EvalCast(Type, left < right);
			}
			if(Operator.equals("<=")) {
				return EvalCast(Type, left <= right);
			}
			if(Operator.equals(">")) {
				return EvalCast(Type, left > right);
			}
			if(Operator.equals(">=")) {
				return EvalCast(Type, left >= right);
			}
			if(Operator.equals("|")) {
				return EvalCast(Type, left | right);
			}
			if(Operator.equals("&")) {
				return EvalCast(Type, left & right);
			}
			if(Operator.equals("<<")) {
				return EvalCast(Type, left << right);
			}
			if(Operator.equals(">>")) {
				return EvalCast(Type, left >> right);
			}
			if(Operator.equals("^")) {
				return EvalCast(Type, left ^ right);
			}
		}
		catch(ClassCastException e) {
		}
		return null;
	}

	@Export @Public @Static Object EvalGetter(GtType Type, Object Value, String FieldName) {
		// TODO Auto-generated method stub
		return null;
	}

}
