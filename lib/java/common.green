
// any type

@Const @Operator int "||"(any x) import GreenTeaRuntime.unary_size;
@Const @Operator boolean "=="(any x, any y) import GreenTeaRuntime.binary_eq;
@Const @Operator boolean "!="(any x, any y) import GreenTeaRuntime.binary_ne;


// unary operator

@Const @Operator boolean not(boolean x) import org.GreenTeaScript.GreenTeaRuntime.unary_not;
@Const @Operator boolean "!"(boolean x) import org.GreenTeaScript.GreenTeaRuntime.unary_not;
@Const @Operator int "+"(int x) import org.GreenTeaScript.GreenTeaRuntime.unary_plus;
@Const @Operator int "-"(int x) import org.GreenTeaScript.GreenTeaRuntime.unary_minus;
@Const @Operator int "~"(int x) import org.GreenTeaScript.GreenTeaRuntime.unary_not;
@Const @Operator double "+"(double x) import org.GreenTeaScript.GreenTeaRuntime.unary_plus;
@Const @Operator double "-"(double x) import org.GreenTeaScript.GreenTeaRuntime.unary_minus;

// binary operator

// boolean
@Const @Operator boolean "=="(boolean x, boolean y) import org.GreenTeaScript.GreenTeaRuntime.binary_eq;
@Const @Operator boolean "!="(boolean x, boolean y) import org.GreenTeaScript.GreenTeaRuntime.binary_ne;

@Const @Coercion String converter(boolean x) import org.GreenTeaScript.GreenTeaRuntime.BooleanToString;
@Const @Coercion any converter(boolean x) import org.GreenTeaScript.GreenTeaRuntime.BooleanToAny;
@Const @Coercion boolean converter(any x) import org.GreenTeaScript.GreenTeaRuntime.AnyToBoolean;

// int
@Const @Operator int "+"(int x, int y) import org.GreenTeaScript.GreenTeaRuntime.binary_add;
@Const @Operator int "-"(int x, int y) import org.GreenTeaScript.GreenTeaRuntime.binary_sub;
@Const @Operator int "*"(int x, int y) import org.GreenTeaScript.GreenTeaRuntime.binary_mul;
@Const @Operator int "/"(int x, int y) import org.GreenTeaScript.GreenTeaRuntime.binary_div;
@Const @Operator int "%"(int x, int y) import org.GreenTeaScript.GreenTeaRuntime.binary_mod;
@Const @Operator int "<<"(int x, int y) import org.GreenTeaScript.GreenTeaRuntime.binary_shl;
@Const @Operator int ">>"(int x, int y) import org.GreenTeaScript.GreenTeaRuntime.binary_shr;
@Const @Operator int "^"(int x, int y) import org.GreenTeaScript.GreenTeaRuntime.binary_and;
@Const @Operator int "|"(int x, int y) import org.GreenTeaScript.GreenTeaRuntime.binary_or;
@Const @Operator int "&"(int x, int y) import org.GreenTeaScript.GreenTeaRuntime.binary_xor;
@Const @Operator boolean "<"(int x,  int y) import org.GreenTeaScript.GreenTeaRuntime.binary_lt;
@Const @Operator boolean "<="(int x, int y) import org.GreenTeaScript.GreenTeaRuntime.binary_le;
@Const @Operator boolean ">"(int x,  int y) import org.GreenTeaScript.GreenTeaRuntime.binary_gt;
@Const @Operator boolean ">="(int x, int y) import org.GreenTeaScript.GreenTeaRuntime.binary_ge;
@Const @Operator boolean "=="(int x, int y) import org.GreenTeaScript.GreenTeaRuntime.binary_eq;
@Const @Operator boolean "!="(int x, int y) import org.GreenTeaScript.GreenTeaRuntime.binary_ne;

@Coercion @Const any converter(int x) import org.GreenTeaScript.GreenTeaRuntime.IntToAny;
@Coercion @Const int converter(any x) import org.GreenTeaScript.GreenTeaRuntime.AnyToInt;
@Coercion @Const String converter(int x) import org.GreenTeaScript.GreenTeaRuntime.IntToString;
@Const int converter(String x) import org.GreenTeaScript.GreenTeaRuntime.StringToInt;

// enum
@Coercion @Const int converter(var x) import org.GreenTeaScript.GreenTeaRuntime.EnumToInt;
@Coercion @Const String converter(var x) import org.GreenTeaScript.GreenTeaRuntime.EnumToString;
 
@Coercion @Const var converter(var x) import org.GreenTeaScript.GreenTeaRuntime.l2i;
@Coercion @Const var converter(var x) import org.GreenTeaScript.GreenTeaRuntime.i2l;
@Coercion @Const var converter(var x) import org.GreenTeaScript.GreenTeaRuntime.l2s;
@Coercion @Const var converter(var x) import org.GreenTeaScript.GreenTeaRuntime.s2l;

@Coercion @Const var converter(var x) import org.GreenTeaScript.GreenTeaRuntime.l2d;
@Coercion @Const var converter(var x) import org.GreenTeaScript.GreenTeaRuntime.f2d;
@Coercion @Const var converter(var x) import org.GreenTeaScript.GreenTeaRuntime.d2l;
@Coercion @Const var converter(var x) import org.GreenTeaScript.GreenTeaRuntime.d2s;

@Coercion @Const var converter(var x) import org.GreenTeaScript.GreenTeaRuntime.ja2l;
@Coercion @Const var converter(var x) import org.GreenTeaScript.GreenTeaRuntime.l2ja;

// String
@Const @Operator String "+"(String x, String y) import org.GreenTeaScript.GreenTeaRuntime.binary_add;
@Const @Operator String "+"(int x, String y) import org.GreenTeaScript.GreenTeaRuntime.binary_add;
@Const @Operator String "+"(boolean x, String y) import org.GreenTeaScript.GreenTeaRuntime.binary_add;

@Const @Operator boolean "=="(String x, String y) import org.GreenTeaScript.GreenTeaRuntime.binary_eq;
@Const @Operator boolean "!="(String x, String y) import org.GreenTeaScript.GreenTeaRuntime.binary_ne;

// double
@Const @Operator double "+"(double x, double y) import org.GreenTeaScript.GreenTeaRuntime.binary_add;
@Const @Operator double "-"(double x, double y) import org.GreenTeaScript.GreenTeaRuntime.binary_sub;
@Const @Operator double "*"(double x, double y) import org.GreenTeaScript.GreenTeaRuntime.binary_mul;
@Const @Operator double "/"(double x, double y) import org.GreenTeaScript.GreenTeaRuntime.binary_div;
@Const @Operator boolean "<"(double x,  double y) import org.GreenTeaScript.GreenTeaRuntime.binary_lt;
@Const @Operator boolean "<="(double x, double y) import org.GreenTeaScript.GreenTeaRuntime.binary_le;
@Const @Operator boolean ">"(double x,  double y) import org.GreenTeaScript.GreenTeaRuntime.binary_gt;
@Const @Operator boolean ">="(double x, double y) import org.GreenTeaScript.GreenTeaRuntime.binary_ge;
@Const @Operator boolean "=="(double x, double y) import org.GreenTeaScript.GreenTeaRuntime.binary_eq;
@Const @Operator boolean "!="(double x, double y) import org.GreenTeaScript.GreenTeaRuntime.binary_ne;

@Const @Operator double "+"(int x, double y) import org.GreenTeaScript.GreenTeaRuntime.binary_add;
@Const @Operator double "-"(int x, double y) import org.GreenTeaScript.GreenTeaRuntime.binary_sub;
@Const @Operator double "*"(int x, double y) import org.GreenTeaScript.GreenTeaRuntime.binary_mul;
@Const @Operator double "/"(int x, double y) import org.GreenTeaScript.GreenTeaRuntime.binary_div;

@Coercion @Const any converter(double x) import org.GreenTeaScript.GreenTeaRuntime.DoubleToAny;
@Coercion @Const double converter(any x) import org.GreenTeaScript.GreenTeaRuntime.AnyToDouble;
@Const double converter(String x) import org.GreenTeaScript.GreenTeaRuntime.StringToDouble;

void print(String s)   import org.GreenTeaScript.LibGreenTea.print;
void println(String s) import org.GreenTeaScript.LibGreenTea.println;
void assert(boolean b) import org.GreenTeaScript.LibGreenTea.Assert;

// array 

<T> int "||"(Array<T> this) import GreenTeaArray.GetSize;
<T> T "[]"(Array<T> this, int index) import GreenTeaArray.Get;
<T> void "[]="(Array<T> this, int index, T value) import GreenTeaArray.Set;
<T> Array<T> add(Array<T> this, T value) import GreenTeaArray.Add;

@Coercion @Const var converter(var x) import org.GreenTeaScript.GreenTeaArray.GreenArrayToStringArray;
@Coercion @Const var converter(var x) import org.GreenTeaScript.GreenTeaArray.StringArrayToGreenArray;



