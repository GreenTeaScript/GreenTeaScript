
// libgreentea
@Common void print(any x)   as "print $1";
@Common void println(any x) as "print $1";
@Common void assert(boolean x) as "assert($1)";

// top type
@Common  @Operator int "||"(Top x) as "(0 if $1 == None else 1)";
@Common  @Operator boolean "=="(Top x, Top y) as "$1 == $2";
@Common  @Operator boolean "!="(Top x, Top y) as "$1 != $2";

// enum //FIXME
/* @Common @Coercion  int converter(var x) import Konoha.TopApi.EnumToInt; */
/* @Common @Coercion  String converter(var x) import Konoha.TopApi.EnumToString; */

// AnyApi
@Common @Coercion  boolean converter(any x) as "bool($1)";
@Common @Coercion  int converter(any x) as "int($1)";
@Common @Coercion  float converter(any x) as "float($1)";

// StringApi
@Common  @Operator String "+"(String x, any y) as "$1 + str($2)";
// @Operator String "+"(int x, String y) import GreenTeaRuntime.Add;
// @Operator String "+"(boolean x, String y) import GreenTeaRuntime.Add;

@Common  @Operator boolean "=="(String x, String y) as "$1 == $2";
@Common  @Operator boolean "!="(String x, String y) as "$1 != $2";

@Common  @Operator int "||"(String x) as "len($1)";
@Common  @Operator String "[]"(String x, int index) as "$1[$2]";
@Common  @Operator String "[:]"(String x, int beginIndex) as "$1[$2:]";
@Common  @Operator String "[:]"(String x, int beginIndex, int endIndex) as "$1[$2:$3]";
/* @Common  @Operator Iterator<String> ".."(String x) import Konoha.StringApi.ToIterator; */

@Common  boolean startsWith(String x, String y) as "$1.startswith($2)";
@Common  boolean endsWith(String x, String y) as "$1.endswith($2)";
@Common  int indexOf(String x, String y) as "$1.find($2)";
@Common  int lastIndexOf(String x, String y) as "$1.rfind($2)";

 var split(String x, String y) as "$1.split($2)";

//@Common  @Coercion any converter(String x) import Konoha.StringApi.ToAny;
@Common  int converter(String x) as "int($1)";
@Common  float converter(String x) as "float($1)";

/* @Hidden @Coercion  var converter(var x) import Konoha.StringApi.s2c; */
/* @Hidden @StrongCoercion  var converter(var x) import Konoha.StringApi.c2s; */

// BooleanApi
@Common  @Operator boolean not(boolean x) as "not $1";
@Common  @Operator boolean "!"(boolean x) as "not $1";
@Common  @Operator boolean "=="(boolean x, boolean y) as "$1 == $2";
@Common  @Operator boolean "!="(boolean x, boolean y) as "$1 != $2";

@Common  @Coercion String converter(boolean x) as "str($1)";
/* @Common  @Coercion any converter(boolean x) import Konoha.BooleanApi.ToAny; */

// IntApi
@Common  @Operator int "+"(int x) as "+$1";
@Common  @Operator int "-"(int x) as "-$1";
@Common  @Operator int "~"(int x) as "~$1";

@Common  @Operator int "+"(int x, int y) as "$1 + $2";
@Common  @Operator int "-"(int x, int y) as "$1 - $2";
@Common  @Operator int "*"(int x, int y) as "$1 * $2";
@Common  @Operator int "/"(int x, int y) as "$1 / $2";
@Common  @Operator int "%"(int x, int y) as "$1 % $2";
@Common  @Operator int "<<"(int x, int y) as "$1 << $2";
@Common  @Operator int ">>"(int x, int y) as "$1 >> $2";
@Common  @Operator int "^"(int x, int y) as "$1 ^ $2";
@Common  @Operator int "|"(int x, int y) as "$1 | $2";
@Common  @Operator int "&"(int x, int y) as "$1 & $2";
@Common  @Operator boolean "<"(int x,  int y) as "$1 < $2";
@Common  @Operator boolean "<="(int x, int y) as "$1 <= $2";
@Common  @Operator boolean ">"(int x,  int y) as "$1 > $2";
@Common  @Operator boolean ">="(int x, int y) as "$1 >= $2";
@Common  @Operator boolean "=="(int x, int y) as "$1 == $2";
@Common  @Operator boolean "!="(int x, int y) as "$1 != $2";

@Common  @Operator float "+"(int x, float y) as "$1 + $2";
@Common  @Operator float "-"(int x, float y) as "$1 - $2";
@Common  @Operator float "*"(int x, float y) as "$1 * $2";
@Common  @Operator float "/"(int x, float y) as "$1 / $2";
@Common  @Operator float "%"(int x, float y) as "$1 % $2";

/* @Coercion  any converter(int x) import Konoha.IntApi.ToAny; */
@Common @Coercion  String converter(int x) as "str($1)";
@Common @Coercion  float converter(int x) as "float($1)";

/* @Hidden @Coercion  var converter(var x) import Konoha.IntApi.l2i; */
/* @Hidden @StrongCoercion  var converter(var x) import Konoha.IntApi.i2l; */
/* @Hidden @Coercion  var converter(var x) import Konoha.IntApi.l2s; */
/* @Hidden @StrongCoercion  var converter(var x) import Konoha.IntApi.s2l; */
/* @Hidden @Coercion  var converter(var x) import Konoha.IntApi.l2b; */
/* @Hidden @StrongCoercion  var converter(var x) import Konoha.IntApi.b2l; */

// DoubleApi
@Common  @Operator float "+"(float x) as "+$1";
@Common  @Operator float "-"(float x) as "-$1";

@Common  @Operator float "+"(float x, float y) as "$1 + $2";
@Common  @Operator float "-"(float x, float y) as "$1 - $2";
@Common  @Operator float "*"(float x, float y) as "$1 * $2";
@Common  @Operator float "/"(float x, float y) as "$1 / $2";
@Common  @Operator boolean "<"(float x,  float y) as "$1 < $2";
@Common  @Operator boolean "<="(float x, float y) as "$1 <= $2";
@Common  @Operator boolean ">"(float x,  float y) as "$1 > $2";
@Common  @Operator boolean ">="(float x, float y) as "$1 >= $2";
@Common  @Operator boolean "=="(float x, float y) as "$1 == $2";
@Common  @Operator boolean "!="(float x, float y) as "$1 != $2";

/* @Coercion  any converter(float x) import Konoha.DoubleApi.ToAny; */
@Common @Coercion  String converter(float x) as "str($1)";
@Common @Coercion  int converter(float x) as "int($1)";

/* @Hidden @Coercion  var converter(var x) import Konoha.DoubleApi.d2f; */
/* @Hidden @StrongCoercion  var converter(var x) import Konoha.DoubleApi.f2d; */
//@Hidden @Coercion  var converter(var x) import Konoha.DoubleApi.d2i;
//@Hidden @Coercion  var converter(var x) import Konoha.DoubleApi.i2d;

// @Coercion boolean converter(any x) import org.GreenTeaScript.GreenTeaRuntime.AnyToBoolean;
//@Coercion  int converter(any x) import org.GreenTeaScript.GreenTeaRuntime.AnyToInt;
// float
//@Coercion  any converter(float x) import org.GreenTeaScript.GreenTeaRuntime.DoubleToAny;
//@Coercion  float converter(any x) import org.GreenTeaScript.GreenTeaRuntime.AnyToDouble;
// float converter(String x) import org.GreenTeaScript.GreenTeaRuntime.StringToDouble;

// ArrayApi
@Common  @Operator <T> int "||"(Array<T> this) as "len($1)";
@Common  @Operator <T> T "[]"(Array<T> this, int index) as "$1[$2]";
@Common @Operator <T> void "[]="(Array<T> this, int index, T value) as "$1[$2] = $3";
@Common <T> Array<T> add(Array<T> this, T value) as "$1.append($2)";
@Common  @Operator <T> Array<T> "[:]"(Array<T> x, int beginIndex) as "$1[$2:]";
@Common  @Operator <T> Array<T> "[:]"(Array<T> x, int beginIndex, int endIndex) as "$1[$2:$3]";

//@Common  @Operator int "||"(Array<int> this) import Konoha.ArrayApi.GetSizeI;
//@Common  @Operator int "[]"(Array<int> this, int index) import Konoha.ArrayApi.GetI;
//@Common @Operator void "[]="(Array<int> this, int index, int value) import Konoha.ArrayApi.SetI;
//@Common Array<int> add(Array<int> this, int value) import Konoha.ArrayApi.AddI;
//@Common  @Operator Array<int> "[:]"(Array<int> x, int beginIndex) import Konoha.ArrayApi.SliceI;
//@Common  @Operator Array<int> "[:]"(Array<int> x, int beginIndex, int endIndex) import Konoha.ArrayApi.SliceI;

// Iterator
/* @Common  <T> boolean hasNext(Iterator<T> this) import NativeLanguageApi.IteratorHasNext; */
/* @Common  <T> T Next(Iterator<T> this) import NativeLanguageApi.IteratorNext; */

// experimental
/* @Hidden @Coercion  var converter(var x) import Konoha.ArrayApi.GreenArrayToStringArray; */
/* @Hidden @StrongCoercion  var converter(var x) import Konoha.ArrayApi.StringArrayToGreenArray; */



