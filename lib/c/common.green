// common api for c

// unary operator
@Const @Operator boolean "!"(boolean x) as "! $1"
@Const @Operator int "+"(int x) as "$1";
@Const @Operator int "-"(int x) as "-$1";
@Const @Operator int "~"(int x) as "~$1";
@Const @Operator double "+"(double x) as "$1";
@Const @Operator double "-"(double x) as "-$1";

// binary operator
// any
@Const @Operator boolean "=="(any x, any y) as "$1  == $2";
@Const @Operator boolean "!="(any x, any y) as "$1  != $2";

// boolean
@Const @Operator boolean "=="(boolean x, boolean y) as "$1  == $2";
@Const @Operator boolean "!="(boolean x, boolean y) as "$1  != $2";
@Const @Operator String converter(boolean x) as "greentea_tostrb($1)";

// int 
@Const @Operator int     "+"(int x, int y)      as "$1 + $2";
@Const @Operator int     "-"(int x, int y)      as "$1 - $2";
@Const @Operator int     "*"(int x, int y)      as "$1 * $2";
@Const @Operator int     "/"(int x, int y)      as "$1 / $2";
@Const @Operator int     "%"(int x, int y)      as "$1 % $2";
@Const @Operator int     "<<"(int x, int y)     as "$1 << $2";
@Const @Operator int     ">>"(int x, int y)     as "$1 >> $2";
@Const @Operator int     "^"(int x, int y)      as "$1 ^ $2";
@Const @Operator int     "|"(int x, int y)      as "$1 | $2";
@Const @Operator int     "&"(int x, int y)      as "$1 & $2";
@Const @Operator boolean "<"(int x,  int y) as "$1 < $2";
@Const @Operator boolean ">"(int x,  int y) as "$1 > $2";
@Const @Operator boolean "<="(int x, int y) as "$1 <= $2";
@Const @Operator boolean ">="(int x, int y) as "$1 >= $2";
@Const @Operator boolean "=="(int x, int y) as "$1 == $2";
@Const @Operator boolean "!="(int x, int y) as "$1 != $2";

@Coercion @Const any converter(int x)    as "greentea_boxi($2)";
@Coercion @Const int converter(any x)    as "greentea_unboxi($2)";
@Coercion @Const String converter(int x) as "greentea_tostr($2)";
@Const int converter(String x)           as "strtol($2, NULL, 10)";


// String
@Const @Operator String  "+"(String x, String y)      as "greentea_strcat($1, $2)";
@Const @Operator boolean "=="(String x, String y)    as "strcmp($1, $2) == 0";
@Const @Operator boolean "!="(String x, String y)    as "strcmp($1, $2) != 0";
@Const @Operator boolean "<"(String x,  String y)    as "strcmp($1, $2) <  0";
@Const @Operator boolean ">"(String x,  String y)    as "strcmp($1, $2) >  0";
@Const @Operator boolean "<="(String x, String y)    as "strcmp($1, $2) <= 0";
@Const @Operator boolean ">="(String x, String y)    as "strcmp($1, $2) >= 0";

boolean startsWith(String x, String y)   as "greentea_startswith($1, $2)";
boolean endsWith(String x, String y)     as "greentea_endswith($1, $2)";
int indexOf(String x, String sub)        as "strstr($1, $2)";
int lastIndexOf(String x, String sub)    as "greentea_lastIndexOf($1, $2)";
String substring(String x, int s)        as "greentea_substring($1, $2, strlen($1))"
String substring(String x, int s, int e) as "greentea_substring($1, $2, $3)"; 
String toLower(String x)                 as "greentea_lower($1)";
String toUpper(String x)                 as "greentea_upper($1)";
int charAt(String x, int pos)            as "$1[$2]";
String replace(String x, String old, String new) as "greentea_replace($1, $2, $3)";

// double
@Const @Operator double  "+"(double x, double y)   as "$1 + $2";
@Const @Operator double  "-"(double x, double y)   as "$1 - $2";
@Const @Operator double  "*"(double x, double y)   as "$1 * $2";
@Const @Operator double  "/"(double x, double y)   as "$1 / $2";
@Const @Operator boolean "<"(double x,  double y) as "$1 < $2";
@Const @Operator boolean ">"(double x,  double y) as "$1 > $2";
@Const @Operator boolean "<="(double x, double y) as "$1 <= $2"
@Const @Operator boolean ">="(double x, double y) as "$1 >= $2"
@Const @Operator boolean "=="(double x, double y) as "$1 == $2"
@Const @Operator boolean "!="(double x, double y) as "$1 != $2"

@Const @Operator double "+"(int x, double y) as "$1 + $2";
@Const @Operator double "-"(int x, double y) as "$1 - $2";
@Const @Operator double "*"(int x, double y) as "$1 * $2";
@Const @Operator double "/"(int x, double y) as "$1 / $2";

//FIXME ApplyNode for converter func has 3 arguments:
//      converter(FromType, ToType, x)
@Coercion @Const any converter(double x) as "greentea_boxf($2)";
@Coercion @Const double converter(any x) as "greentea_unboxf($2)";
@Const double converter(String x)        as "strtod($2, NULL)";

// function
void print(String x) as "puts($1)";
void println(String x) as "puts($1);";
void assert(boolean x) as "assert($1)";
