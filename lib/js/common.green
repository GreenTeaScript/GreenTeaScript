// common api for c
// unary operator
@Const @Operator boolean "!"(boolean x) as "! $1"
@Const @Operator int "+"(int x) as "($1 | 0)";
@Const @Operator int "-"(int x) as "-$1";
@Const @Operator int "~"(int x) as "~$1";
@Const @Operator double "+"(double x) as "$1";
@Const @Operator double "-"(double x) as "-$1";

// binary operator
// any
@Const @Operator boolean "=="(any x, any y) as "$1  == $2";
@Const @Operator boolean "!="(any x, any y) as "$1  != $2";

// boolean
@Const @Operator boolean "=="(boolean x, boolean y) as "$1  == $2";
@Const @Operator boolean "!="(boolean x, boolean y) as "$1  != $2";
@Const @Operator String converter(boolean x) as "\"\" + $1";

// int 
@Const @Operator int     "+"(int x, int y)  as "$1 + $2";
@Const @Operator int     "-"(int x, int y)  as "$1 - $2";
@Const @Operator int     "*"(int x, int y)  as "$1 * $2";
@Const @Operator int     "/"(int x, int y)  as "$1 / $2";
@Const @Operator int     "%"(int x, int y)  as "$1 % $2";
@Const @Operator int     "<<"(int x, int y) as "$1 << $2";
@Const @Operator int     ">>"(int x, int y) as "$1 >> $2";
@Const @Operator int     "^"(int x, int y)  as "$1 ^ $2";
@Const @Operator int     "|"(int x, int y)  as "$1 | $2";
@Const @Operator int     "&"(int x, int y)  as "$1 & $2";
@Const @Operator boolean "<"(int x,  int y) as "$1 < $2";
@Const @Operator boolean ">"(int x,  int y) as "$1 > $2";
@Const @Operator boolean "<="(int x, int y) as "$1 <= $2";
@Const @Operator boolean ">="(int x, int y) as "$1 >= $2";
@Const @Operator boolean "=="(int x, int y) as "$1 == $2";
@Const @Operator boolean "!="(int x, int y) as "$1 != $2";



// String
String +(String x, String y)      as "$1 + $2";
boolean ==(String x, String y)    as "$1 == $2";
boolean !=(String x, String y)    as "$1 != $2";
boolean <(String x,  String y)    as "$1 <= $2";
boolean <=(String x, String y)    as "$1 <  $2";
boolean >(String x,  String y)    as "$1 >  $2";
boolean >=(String x, String y)    as "$1 >= $2";

boolean startsWith(String x, String y) as " $1.indexOf($2, 0) == 0";
boolean endsWith(String x, String y) as "$1.lastIndexOf($2, 0) == 0";
int indexOf(String x, String sub) as "$1.indexOf($2)";
int lastIndexOf(String x, String sub) as "$1.lastIndexOf($2)";
String substring(String x, int s) as "$1.substring($2)"
String substring(String x, int s, int e) as "$1.substring($2, $3)"; 
String toLower(String x) as "$1.lower()";
String toUpper(String x) as "$1.upper()";
String replace(String x, String old, String new) as "$1.replace($2, $3)";

// double
@Const @Operator double  "+"(double x, double y)   as "$1 + $2";
@Const @Operator double  "-"(double x, double y)   as "$1 - $2";
@Const @Operator double  "*"(double x, double y)   as "$1 * $2";
@Const @Operator double  "/"(double x, double y)   as "$1 / $2";
@Const @Operator boolean "<"(double x,  double y) as "$1 < $2";
@Const @Operator boolean ">"(double x,  double y) as "$1 > $2";
@Const @Operator boolean "<="(double x, double y) as "$1 <= $2"
@Const @Operator boolean ">="(double x, double y) as "$1 >= $2"
@Const @Operator boolean "=="(double x, double y) as "$1 == $2"
@Const @Operator boolean "!="(double x, double y) as "$1 != $2"

@Const @Operator double "+"(int x, double y) as "$1 + $2";
@Const @Operator double "-"(int x, double y) as "$1 - $2";
@Const @Operator double "*"(int x, double y) as "$1 * $2";
@Const @Operator double "/"(int x, double y) as "$1 / $2";


// function
void print(String x) as "console.log($1)";
void println(String x) as "console.log($1)";
void assert(boolean x) as "assert($1)";
