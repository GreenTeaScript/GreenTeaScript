// written by kimio kuramitsu

int TestFunc(int n) {
    if(n > 0) {
        return 1;
    }
    else {
        return 0;
    }
    return 2; // never reached
}

int TestFunc1(int n) {
    if(n > 0) return 1;
    else return 0;
    return 2; // never reached
}

int TestFunc2(int n) {
    if(n > 0) return 1; else return 0;
    return 2; // never reached
}

int TestFunc3(int n) {
    if(n > 0) {
        return 1;
    }
    return 0;
}

int TestFunc4(int n) {
    if(n > 0) return 1;
    return 0;
}

int TestFunc5(int n) {
    if(n > 0) return 1; return 0;
}

int TestFunc6(int n) {
    if(n > 0) {
    }
    else {
        return 0;
    }
    return 1;
}

int TestFunc7(int n) {
    if(n > 0) {
    }
    else return 0;
    return 1; 
}       

int TestFunc8(int n) {
    if(n > 0) {
        if(n == 1) {
            return 1;
        }
        else {
            return 0;
        }
    }
    else {
        if(n == 0) {
            return 0;
        }
        else {
            return 1;
        }
    }
}

int TestFunc9(int n) {
    if(n > 0) {
    }
    else {
    }
    return 1;
}


@Export
int main() {
    assert(TestFunc(1) == 1);
    assert(TestFunc(0) == 0);
    assert(TestFunc2(1) == 1);
    assert(TestFunc2(0) == 0);
    assert(TestFunc3(1) == 1);
    assert(TestFunc3(0) == 0);
    assert(TestFunc4(1) == 1);
    assert(TestFunc4(0) == 0);
    assert(TestFunc5(1) == 1);
    assert(TestFunc5(0) == 0);
    assert(TestFunc6(1) == 1);
    assert(TestFunc6(0) == 0);
    assert(TestFunc7(1) == 1);
    assert(TestFunc7(0) == 0);
    assert(TestFunc8(1) == 1);
    assert(TestFunc8(0) == 0);
    assert(TestFunc8(2) == 0);
    assert(TestFunc8(-1) == 1);
    assert(TestFunc9(1) == 1);
    assert(TestFunc9(0) == 1);
    return 0;
}

