var GreenTeaLibraries: { [key: string]: string; } = {};
GreenTeaLibraries["lib/bash/common.green"] = "int +(int x) as \"(($1))\";\n\nint -(int x) as \"((-$1))\";\n\nint ~(int x) as \"((~$1))\";\n\nint +(int x, int y)      as \"(($1 + $2))\";\n\nint -(int x, int y)      as \"(($1 - $2))\";\n\nint *(int x, int y)      as \"(($1 * $2))\";\n\nint /(int x, int y)      as \"(($1 / $2))\";\n\nint %(int x, int y)      as \"(($1 % $2))\";\n\nint <<(int x, int y)     as \"(($1 << $2))\";\n\nint >>(int x, int y)     as \"(($1 >> $2))\";\n\nint ^(int x, int y)      as \"(($1 ^ $2))\";\n\nint |(int x, int y)      as \"(($1 | $2))\";\n\nint &(int x, int y)      as \"(($1 & $2))\";\n\nboolean <(int x,  int y) as \"(($1 < $2))\";\n\nboolean <=(int x, int y) as \"(($1 <= $2))\";\n\nboolean >(int x,  int y) as \"(($1 > $2))\";\n\nboolean >=(int x, int y) as \"(($1 >= $2))\";\n\nboolean ==(int x, int y) as \"(($1 == $2))\";\n\nboolean !=(int x, int y) as \"(($1 != $2))\";\n\n\n\nString +(String x, String y) as \"(concat $1 $2)\";\n\nboolean ==(String x, String y) as \"(eqStr $1 $2)\";\n\nboolean !=(String x, String y) as \"(neStr $1 $2)\";\n\n\n\nboolean not(boolean x)   as \"(notBool $1)\";\n\nboolean !(boolean x)    as \"(notBool $1)\";\n\nboolean ==(boolean x, boolean y) as \"(($1 == $2))\";\n\nboolean !=(boolean x, boolean y) as \"(($1 != $2))\";\n\n\n\nboolean ==(any x, any y) as \"(eqAny $1 $2)\";\n\nboolean !=(any x, any y) as \"(neAny $1 $2)\";\n\n\n\nvoid print(String x) as \"print $1\";\n\nvoid assert(boolean x) as \"assert $1\";\n\n\n\nvoid rec(int n) as \"rec $1\";\n";
GreenTeaLibraries["lib/c/common.green"] = "// common api for c\n\n\n\n// unary operator\n\n// any\n\nint +(int x) as \"$1\";\n\nint -(int x) as \"-$1\";\n\nint ~(int x) as \"~$1\";\n\n\n\n// binary operator\n\n// any\n\nboolean ==(any x, any y) as \"$1  == $2\";\n\nboolean !=(any x, any y) as \"$1  != $2\";\n\nboolean !(boolean x) as \"! $1\"\n\n\n\n// boolean\n\nboolean ==(boolean x, boolean y) as \"$1  == $2\";\n\nboolean !=(boolean x, boolean y) as \"$1  != $2\";\n\nString convert(boolean x) as \"green_toString($1)\";\n\n\n\n// int \n\nint +(int x, int y)      as \"$1 + $2\";\n\nint -(int x, int y)      as \"$1 - $2\";\n\nint *(int x, int y)      as \"$1 * $2\";\n\nint /(int x, int y)      as \"$1 / $2\";\n\nint %(int x, int y)      as \"$1 % $2\";\n\nint <<(int x, int y)     as \"$1 << $2\";\n\nint >>(int x, int y)     as \"$1 >> $2\";\n\nint ^(int x, int y)      as \"$1 ^ $2\";\n\nint |(int x, int y)      as \"$1 | $2\";\n\nint &(int x, int y)      as \"$1 & $2\";\n\nboolean <(int x,  int y) as \"$1 < $2\";\n\nboolean <=(int x, int y) as \"$1 <= $2\";\n\nboolean >(int x,  int y) as \"$1 > $2\";\n\nboolean >=(int x, int y) as \"$1 >= $2\";\n\nboolean ==(int x, int y) as \"$1 == $2\";\n\nboolean !=(int x, int y) as \"$1 != $2\";\n\n\n\nString convert(int x) as \"ToStr($1)\";\n\n\n\n// String\n\nString +(String x, String y)      as \"greentea_strcat($1, $2)\";\n\nboolean ==(String x, String y)    as \"strcmp($1, $2) == 0\";\n\nboolean !=(String x, String y)    as \"strcmp($1, $2) != 0\";\n\nboolean <(String x,  String y)    as \"strcmp($1, $2) <= 0\";\n\nboolean <=(String x, String y)    as \"strcmp($1, $2) <  0\";\n\nboolean >(String x,  String y)    as \"strcmp($1, $2) >  0\";\n\nboolean >=(String x, String y)    as \"strcmp($1, $2) >= 0\";\n\n\n\nboolean startsWith(String x, String y) as \"$1.startswith($2)\";\n\nboolean endsWith(String x, String y) as \"$1.endswith($2)\";\n\nint indexOf(String x, String sub) as \"$1.find($2)\";\n\nint lastIndexOf(String x, String sub) as \"$1.rfind($2)\";\n\nString substring(String x, int s) as \"$1[$2:]\"\n\nString substring(String x, int s, int e) as \"$1[$2:$3]\"; \n\nString toLower(String x) as \"$1.lower()\";\n\nString toUpper(String x) as \"$1.upper()\";\n\nint charAt(String x, int pos) as \"$1[$2]\";\n\nString replace(String x, String old, String new) as \"$1.replace($2, $3)\";\n\n\n\n// function\n\nvoid print(String x) as \"puts($1)\";\n\nvoid println(String x) as \"puts($1); putchar('\\n')\";\n\nvoid assert(boolean x) as \"assert($1)\";\n";
GreenTeaLibraries["lib/exe/common.green"] = "// unary operator\n\nboolean not(boolean x);\n\nboolean !(boolean x);\n\nint +(int x);\n\nint -(int x);\n\nint ~(int x);\n\n\n\n// binary operator\n\n\n\n// boolean\n\nboolean ==(boolean x, boolean y);\n\nboolean !=(boolean x, boolean y);\n\n//String convert(boolean x) as \"green_toString($1)\";\n\n\n\n// int\n\nint +(int x, int y);\n\nint -(int x, int y);\n\nint *(int x, int y);\n\nint /(int x, int y);\n\nint %(int x, int y);\n\nint <<(int x, int y);\n\nint >>(int x, int y);\n\nint ^(int x, int y);\n\nint |(int x, int y);\n\nint &(int x, int y);\n\nboolean <(int x,  int y);\n\nboolean <=(int x, int y);\n\nboolean >(int x,  int y);\n\nboolean >=(int x, int y);\n\nboolean ==(int x, int y);\n\nboolean !=(int x, int y);\n\n\n\n// String\n\nString +(String x, String y);\n\nString +(String x, int y);\n\nString +(String x, boolean y);\n\nString +(int x, String y);\n\nString +(boolean x, String y);\n\nboolean ==(String x, String y);\n\nboolean !=(String x, String y);\n\n\n\n// function\n\nvoid print(any s);\n\nvoid println(any s);\n\nvoid assert(boolean b);\n\n\n";
GreenTeaLibraries["lib/js/common.green"] = "// common api for c\n\n\n\n// unary operator\n\n// any\n\nint +(int x) as \"($1 | 0)\";\n\nint -(int x) as \"-$1\";\n\nint ~(int x) as \"~$1\";\n\n\n\n// binary operator\n\n// any\n\nboolean ==(any x, any y) as \"$1  == $2\";\n\nboolean !=(any x, any y) as \"$1  != $2\";\n\nboolean !(boolean x) as \"! $1\"\n\n\n\n// boolean\n\nboolean ==(boolean x, boolean y) as \"$1  == $2\";\n\nboolean !=(boolean x, boolean y) as \"$1  != $2\";\n\nString convert(boolean x) as \"green_toString($1)\";\n\n\n\n// int \n\nint +(int x, int y)      as \"$1 + $2\";\n\nint -(int x, int y)      as \"$1 - $2\";\n\nint *(int x, int y)      as \"$1 * $2\";\n\nint /(int x, int y)      as \"$1 / $2\";\n\nint %(int x, int y)      as \"$1 % $2\";\n\nint <<(int x, int y)     as \"$1 << $2\";\n\nint >>(int x, int y)     as \"$1 >> $2\";\n\nint ^(int x, int y)      as \"$1 ^ $2\";\n\nint |(int x, int y)      as \"$1 | $2\";\n\nint &(int x, int y)      as \"$1 & $2\";\n\nboolean <(int x,  int y) as \"$1 < $2\";\n\nboolean <=(int x, int y) as \"$1 <= $2\";\n\nboolean >(int x,  int y) as \"$1 > $2\";\n\nboolean >=(int x, int y) as \"$1 >= $2\";\n\nboolean ==(int x, int y) as \"$1 == $2\";\n\nboolean !=(int x, int y) as \"$1 != $2\";\n\n\n\n// String\n\nString +(String x, String y)      as \"$1 + $2\";\n\nboolean ==(String x, String y)    as \"$1 == $2\";\n\nboolean !=(String x, String y)    as \"$1 != $2\";\n\nboolean <(String x,  String y)    as \"$1 <= $2\";\n\nboolean <=(String x, String y)    as \"$1 <  $2\";\n\nboolean >(String x,  String y)    as \"$1 >  $2\";\n\nboolean >=(String x, String y)    as \"$1 >= $2\";\n\n\n\nboolean startsWith(String x, String y) as \" $1.indexOf($2, 0) == 0\";\n\nboolean endsWith(String x, String y) as \"$1.lastIndexOf($2, 0) == 0\";\n\nint indexOf(String x, String sub) as \"$1.indexOf($2)\";\n\nint lastIndexOf(String x, String sub) as \"$1.lastIndexOf($2)\";\n\nString substring(String x, int s) as \"$1.substring($2)\"\n\nString substring(String x, int s, int e) as \"$1.substring($2, $3)\"; \n\nString toLower(String x) as \"$1.lower()\";\n\nString toUpper(String x) as \"$1.upper()\";\n\nString replace(String x, String old, String new) as \"$1.replace($2, $3)\";\n\n\n\n// function\n\nvoid print(String x) as \"console.log($1)\";\n\nvoid println(String x) as \"console.log($1)\";\n\nvoid assert(boolean x) as \"assert($1)\";\n";
GreenTeaLibraries["lib/perl/common.green"] = "int +(int x) as \"$1\";\n\nint -(int x) as \"-$1\";\n\nint +(int x, int y)      as \"$1 + $2\";\n\nint -(int x, int y)      as \"$1 - $2\";\n\nint *(int x, int y)      as \"$1 * $2\";\n\nint /(int x, int y)      as \"$1 / $2\";\n\nint %(int x, int y)      as \"$1 % $2\";\n\nint <<(int x, int y)     as \"$1 << $2\";\n\nint >>(int x, int y)     as \"$1 >> $2\";\n\nint ^(int x, int y)      as \"$1 ^ $2\";\n\nint |(int x, int y)      as \"$1 | $2\";\n\nint &(int x, int y)      as \"$1 & $2\";\n\nboolean <(int x,  int y) as \"$1 < $2\";\n\nboolean <=(int x, int y) as \"$1 <= $2\";\n\nboolean >(int x,  int y) as \"$1 > $2\";\n\nboolean >=(int x, int y) as \"$1 >= $2\";\n\nboolean ==(int x, int y) as \"$1 == $2\";\n\nboolean !=(int x, int y) as \"$1 != $2\";\n\n\n\n//typeof[1] +=(any x, typeof(x) y) as \"$1 = $1 + $2\";\n\n\n\nString +(String x, String y) as \"$1 . $2\";\n\nboolean ==(String x, String y) as \"$1 eq $2\";\n\nboolean !=(String x, String y) as \"$1 ne $2\";\n\nint length(String x) as \"length($1)\";\n\nString concat(String x, String y) as \"$1 . $2\";\n\n\n\nvoid print(String x) as \"print ($1)\";\n\nvoid assert(boolean x) as \"($1 == 1) or die \\\"Assertion faild\\\"\";\n\n\n\n//typeof(a)[0] add(Array<any> a, typeof(a)[0] v); \n\n//typeof(a)[0] get(Array<var> a, int index);\n\n//\n\n//void f(var duck) {\n\n//	print $duck.name;\n\n//}\n";
GreenTeaLibraries["lib/python/common.green"] = "// common api for python\n\n\n\n// unary operator\n\n// any\n\nboolean not(boolean x) as \"not $1\"\n\nboolean !(boolean x) as \"not $1\"\n\nint +(int x) as \"$1\";\n\nint -(int x) as \"-$1\";\n\nint ~(int x) as \"~$1\";\n\n\n\n// binary operator\n\n// any\n\nboolean ==(any x, any y) as \"$1  == $2\";\n\nboolean !=(any x, any y) as \"$1  != $2\";\n\n\n\n// boolean\n\nboolean ==(boolean x, boolean y) as \"$1  == $2\";\n\nboolean !=(boolean x, boolean y) as \"$1  != $2\";\n\nString convert(boolean x) as \"green_toString($1)\";\n\n\n\n// int\n\nint +(int x, int y)      as \"$1 + $2\";\n\nint -(int x, int y)      as \"$1 - $2\";\n\nint *(int x, int y)      as \"$1 * $2\";\n\nint /(int x, int y)      as \"$1 / $2\";\n\nint %(int x, int y)      as \"$1 % $2\";\n\nint <<(int x, int y)     as \"$1 << $2\";\n\nint >>(int x, int y)     as \"$1 >> $2\";\n\nint ^(int x, int y)      as \"$1 ^ $2\";\n\nint |(int x, int y)      as \"$1 | $2\";\n\nint &(int x, int y)      as \"$1 & $2\";\n\nboolean <(int x,  int y) as \"$1 < $2\";\n\nboolean <=(int x, int y) as \"$1 <= $2\";\n\nboolean >(int x,  int y) as \"$1 > $2\";\n\nboolean >=(int x, int y) as \"$1 >= $2\";\n\nboolean ==(int x, int y) as \"$1 == $2\";\n\nboolean !=(int x, int y) as \"$1 != $2\";\n\n\n\nString convert(int x) as \"str($1)\";\n\n\n\n// String\n\nString +(String x, String y)      as \"$1 + $2\";\n\nboolean ==(String x, String y)    as \"$1 == $2\";\n\nboolean !=(String x, String y)    as \"$1 != $2\";\n\nboolean <(String x,  String y)    as \"$1 < $2\";\n\nboolean <=(String x, String y)    as \"$1 <= $2\";\n\nboolean >(String x,  String y)    as \"$1 > $2\";\n\nboolean >=(String x, String y)    as \"$1 >= $2\";\n\n\n\nboolean startsWith(String x, String y) as \"$1.startswith($2)\";\n\nboolean endsWith(String x, String y) as \"$1.endswith($2)\";\n\nint indexOf(String x, String sub) as \"$1.find($2)\";\n\nint lastIndexOf(String x, String sub) as \"$1.rfind($2)\";\n\nString substring(String x, int s) as \"$1[$2:]\"\n\nString substring(String x, int s, int e) as \"$1[$2:$3]\";\n\nString toLower(String x) as \"$1.lower()\";\n\nString toUpper(String x) as \"$1.upper()\";\n\nString replace(String x, String old, String new) as \"$1.replace($2, $3)\";\n\n\n\n// function\n\nvoid print(String x) as \"print $1,\";\n\nvoid println(String x) as \"print $1\";\n\nvoid assert(boolean x) as \"assert($1)\";\n\n\n";
