/* The Computer Language Benchmarks Game
 * http://shootout.alioth.debian.org/
 * 
 * contributed by Mark C. Lewis
 * modified slightly by Chad Whipkey
 */

let Math = import java.lang.Math;
let PI = 3.141592653589793;
let SOLAR_MASS = 4 * PI * PI;
let DAYS_PER_YEAR = 365.24;
let N = 50000;

class Body {
    double x, y, z, vx, vy, vz, mass;
    constructor() {}
}

Body offsetMomentum(Body this, double px, double py, double pz){
    this.vx = -px / SOLAR_MASS;
    this.vy = -py / SOLAR_MASS;
    this.vz = -pz / SOLAR_MASS;
    return this;
}


Body jupiter(){
    Body p = new Body();
    p.x = 4.84143144246472090e+00;
    p.y = -1.16032004402742839e+00;
    p.z = -1.03622044471123109e-01;
    p.vx = 1.66007664274403694e-03 * DAYS_PER_YEAR;
    p.vy = 7.69901118419740425e-03 * DAYS_PER_YEAR;
    p.vz = -6.90460016972063023e-05 * DAYS_PER_YEAR;
    p.mass = 9.54791938424326609e-04 * SOLAR_MASS;
    return p;
}

Body saturn(){
    Body p = new Body();
    p.x = 8.34336671824457987e+00;
    p.y = 4.12479856412430479e+00;
    p.z = -4.03523417114321381e-01;
    p.vx = -2.76742510726862411e-03 * DAYS_PER_YEAR;
    p.vy = 4.99852801234917238e-03 * DAYS_PER_YEAR;
    p.vz = 2.30417297573763929e-05 * DAYS_PER_YEAR;
    p.mass = 2.85885980666130812e-04 * SOLAR_MASS;
    return p;
}

Body uranus(){
    Body p = new Body();
    p.x = 1.28943695621391310e+01;
    p.y = -1.51111514016986312e+01;
    p.z = -2.23307578892655734e-01;
    p.vx = 2.96460137564761618e-03 * DAYS_PER_YEAR;
    p.vy = 2.37847173959480950e-03 * DAYS_PER_YEAR;
    p.vz = -2.96589568540237556e-05 * DAYS_PER_YEAR;
    p.mass = 4.36624404335156298e-05 * SOLAR_MASS;
    return p;
}

Body neptune(){
    Body p = new Body();
    p.x = 1.53796971148509165e+01;
    p.y = -2.59193146099879641e+01;
    p.z = 1.79258772950371181e-01;
    p.vx = 2.68067772490389322e-03 * DAYS_PER_YEAR;
    p.vy = 1.62824170038242295e-03 * DAYS_PER_YEAR;
    p.vz = -9.51592254519715870e-05 * DAYS_PER_YEAR;
    p.mass = 5.15138902046611451e-05 * SOLAR_MASS;
    return p;
}

Body sun(){
    Body p = new Body();
    p.mass = SOLAR_MASS;
    return p;
}


class NBodySystem {
    Body[] bodies;

    constructor() {
        double px = 0.0;
        double py = 0.0;
        double pz = 0.0;
        this.bodies = [sun(), jupiter(), saturn(), uranus(), neptune()];
        int i = 0;
        while(i < |this.bodies|) {
            px = px + this.bodies[i].vx * this.bodies[i].mass;
            py = py + this.bodies[i].vy * this.bodies[i].mass;
            pz = pz + this.bodies[i].vz * this.bodies[i].mass;
            i = i + 1;
        }
        this.bodies[0].offsetMomentum(px,py,pz);
    }

}

void advance(NBodySystem this, double dt) {
    int i = 0;
    while(i < |this.bodies|) {
        Body iBody = this.bodies[i];
        int j=i+1; 
        while(j < |this.bodies|) {
            double dx = iBody.x - this.bodies[j].x;
            double dy = iBody.y - this.bodies[j].y;
            double dz = iBody.z - this.bodies[j].z;
            double dSquared = dx * dx + dy * dy + dz * dz;
            double distance = Math.sqrt(dSquared);
            double mag = dt / (dSquared * distance);

            iBody.vx = iBody.vx - dx * this.bodies[j].mass * mag;
            iBody.vy = iBody.vy - dy * this.bodies[j].mass * mag;
            iBody.vz = iBody.vz - dz * this.bodies[j].mass * mag;

            this.bodies[j].vx = this.bodies[j].vx + dx * iBody.mass * mag;
            this.bodies[j].vy = this.bodies[j].vy + dy * iBody.mass * mag;
            this.bodies[j].vz = this.bodies[j].vz + dz * iBody.mass * mag;
            j = j + 1;
        }
        i = i + 1;
    }

    while(i < |this.bodies|) {
        Body body = this.bodies[i];
        body.x = body.x + dt * body.vx;
        body.y = body.y + dt * body.vy;
        body.z = body.z + dt * body.vz;
        i = i + 1;
    }
}

double energy(NBodySystem this){
    double dx, dy, dz, distance;
    double e = 0.0;

    int i = 0;
    while(i < |this.bodies|) {
        Body iBody = this.bodies[i];
        e = e + (0.5 * iBody.mass * ( iBody.vx * iBody.vx + iBody.vy * iBody.vy + iBody.vz * iBody.vz ));

        int j=i+1;
        while(j < |this.bodies|) {
            Body jBody = this.bodies[j];
            dx = iBody.x - jBody.x;
            dy = iBody.y - jBody.y;
            dz = iBody.z - jBody.z;

            distance = Math.sqrt(dx*dx + dy*dy + dz*dz);
            e = e - (iBody.mass * jBody.mass) / distance;
            j = j + 1;
        }
        i = i + 1;
    }
    return e;
}

@Export
int main() {
    int n = N;
    NBodySystem bodies = new NBodySystem();
    println("energy:"+ bodies.energy());
    int i = 0;
    while(i < n) {
        bodies.advance(0.01);
        i = i + 1;
    }
    println("energy:"+ bodies.energy());
    return 0;
}

