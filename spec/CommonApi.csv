GreenTea	interface	Java	JavaScript	C#	C/C++	Perl	Python	Bash	Ruby	Lua#any		Object								(T)X		(T)X								X instanceof T	"boolean instanceof(any X, GtType T)"	X instanceof T								(to String)X	String convert(any X)	X.toString()								(to T)X	T convert(any X)	"GreenTea.Conv(X, T)"								(to Iterator)X	Iterator convert(any X)	X.toIterator()																												#boolean		boolean								X == Y	"boolean == (boolean X, boolean Y)"	X == Y								X != Y	"boolean != (boolean X, boolean Y)"	X == Y								not X	boolean not(boolean X)	! X								X and Y		X && Y								X or Y		X || Y								exists X	boolean exists(any X)	(X != null)								assert(X)	void assert(boolean X)	assert(X)								X ? Y : Z		X ? Y : Z								X ?? Y		(X == null) ? Y : Z																		# int		long								X == Y	"int == (int X, int Y)"	X == Y								X != Y	"int != (int X, int Y)"	X != Y								X < Y	"int < (int X, int Y)"	X < Y								X <= Y	"int <= (int X, int Y)"	X <= Y								X > Y	"int > (int X, int Y)"	X > Y								X >= Y	"int >= (int X, int Y)"	X >= Y								X + Y	"int + (int X, int Y)"	X + Y								  -X	int -(int X)	  -X								X - Y	"int - (int X, int Y)"	X - Y								X * Y	"int * (int X, int Y)"	X * Y								X ** Y	"int ** (int X, int Y)"						X ** Y			X / Y	"int / (int X, int Y)"	X / Y								X++ ++X	int ++(int X)	  ++X								X-- --X	int --(int X)	  --X								X mod Y	"int mod (int X, int Y)"	X % Y								X & Y	"int < (int X, int Y)"	X < Y								X | Y	"int <= (int X, int Y)"	X <= Y								X ^ Y	"int > (int X, int Y)"	X > Y								~X	"int >= (int X, int Y)"	X >= Y								X << Y	"int + (int X, int Y)"	X << Y								X >> Y	"int - (int X, int Y)"	X << Y																		# String										X + Y	"String + (String X, String Y)"	X + Y				X . Y				X == Y	"int == (int X, int Y)"	X == Y								X != Y	"int != (int X, int Y)"	X != Y								X < Y	"int < (int X, int Y)"	X < Y								X <= Y	"int <= (int X, int Y)"	X <= Y								X > Y	"int > (int X, int Y)"	X > Y								X >= Y	"int >= (int X, int Y)"	X >= Y								println(X)	void println(String X)	System.out.println(X)								print(X)	void print(String X)	System.out.print(X)								"printf(X, ...)"	"void printf(String X, any[] Y)"	"System.out.print(X, ...)"								|X|	int size(String X)	X.length								X[Y]	"String get(String X, int Y)"	new String(X.charAt(Y))								X[Y:Z]	"String slice(String X, int Y, int Z)"	"X.substring(Y, Z)"								X.indexOf(Y)	"int indexOf(String X, String Y)"	X.indexOf(Y)								X.lastIndexOf(Y)	"int lastIndexOf(String X, String Y)"	Y.lastIndexOf(Y)								X.substring(Y)	"String substring(String X, int Y, int Z)"	X.substring(Y)								"X.substring(Y, Z)"	"String substring(String X, int Y, int Z)"	"X.substring(Y, Z)"								X.startsWith(Y)	"boolean startsWith(String X, String Y)"	X.startsWith(Y)								X.endsWith(Y)	"boolean endsWith(String X, String Y)"	X.endsWith(Y)								X.toUpperCase(X)	String toUpperCase(String X)	X.toUpperCase()								X.toLowerCase(X)	String toLowerCase(String X)	X.toLowerCase()								X.equalsIgnoreCase(Y)	"boolean equalsIgnoreCase(String X, String Y)"	X.equalsIgnoreCase(Y)								"X.replace(Y, Z)"	"String replace(String X, String Y, String Z)"	"X.replace(Y, Z)"								"X.replaceAll(Y, Z)"	"String replaceAll(String X, String Y, String Z)"	"X.replace(Y, Z)"								X.split(Y)	"String[] split(String X, String Y)"	X.split(Y)																		#Array<T>		ArrayList<T>								|X|	int size(Array X)	X.size()								X[Y]	"T get(Array X, int Y)"	X[Y]								X[Y] = Z	"void set(Array X, int Y, T Z);"	X[Y] = Z								X[Y:Z]	"Array slice(Array X, int Y, int Z)"									